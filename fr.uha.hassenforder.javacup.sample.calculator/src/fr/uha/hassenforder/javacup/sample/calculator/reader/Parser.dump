===== Messages =====
Info: Delete file : C:\Users\XPS\eclipse-workspace\fr.uha.hassenforder.javacup.sample.calculator\src\fr\uha\hassenforder\javacup\sample\calculator\reader\ETerminal.java
Info: Delete file : C:\Users\XPS\eclipse-workspace\fr.uha.hassenforder.javacup.sample.calculator\src\fr\uha\hassenforder\javacup\sample\calculator\reader\ENonterminal.java
Info: Delete file : C:\Users\XPS\eclipse-workspace\fr.uha.hassenforder.javacup.sample.calculator\src\fr\uha\hassenforder\javacup\sample\calculator\reader\Parser.java
Info: Delete file : C:\Users\XPS\eclipse-workspace\fr.uha.hassenforder.javacup.sample.calculator\src\fr\uha\hassenforder\javacup\sample\calculator\reader\Parser.dump
Info: Generate Terminal file : C:\Users\XPS\eclipse-workspace\fr.uha.hassenforder.javacup.sample.calculator\src\fr\uha\hassenforder\javacup\sample\calculator\reader\ETerminal.java
Info: Generate Nonterminal file : C:\Users\XPS\eclipse-workspace\fr.uha.hassenforder.javacup.sample.calculator\src\fr\uha\hassenforder\javacup\sample\calculator\reader\ENonterminal.java
Info: Generate Parser file : C:\Users\XPS\eclipse-workspace\fr.uha.hassenforder.javacup.sample.calculator\src\fr\uha\hassenforder\javacup\sample\calculator\reader\Parser.java
Info: Generate Dump file : C:\Users\XPS\eclipse-workspace\fr.uha.hassenforder.javacup.sample.calculator\src\fr\uha\hassenforder\javacup\sample\calculator\reader\Parser.dump
===== Terminals =====
[0]error [1]EOF [2]OOA [3]EQUAL 
[4]PLUS [5]MINUS [6]TIMES [7]DIVIDE 
[8]LPAREN [9]RPAREN [10]EOLN [11]NUMBER<Integer> 
[12]ID<String> [13]UPLUS [14]UMINUS 

===== Non terminals =====
[0]commands [1]list [2]instr [3]expr<Integer> 
[0]$START<Object> [5]$parenthesis1 [6]$parenthesis1$0_many 

===== Productions =====
[0] $START ::= commands EOF 
[1] commands ::= list 
[2] $parenthesis1 ::= instr EOLN 
[3] list ::= $parenthesis1$0_many 
[4] instr ::= ID EQUAL expr 
[5] instr ::= expr 
[6] expr ::= expr PLUS expr 
[7] expr ::= expr MINUS expr 
[8] expr ::= expr TIMES expr 
[9] expr ::= expr DIVIDE expr 
[10] expr ::= MINUS expr 
[11] expr ::= PLUS expr 
[12] expr ::= LPAREN expr RPAREN 
[13] expr ::= NUMBER 
[14] expr ::= ID 
[15] $parenthesis1$0_many ::= 
[16] $parenthesis1$0_many ::= $parenthesis1$0_many $parenthesis1 

===== Viable Prefix Recognizer =====
lalr_state [0]: {
  [$START ::= (*) commands EOF , {EOF[1]}]
  [commands ::= (*) list , {EOF[1]}]
  [list ::= (*) $parenthesis1$0_many , {EOF[1]}]
  [$parenthesis1$0_many ::= (*) , {EOF[1], PLUS[4], MINUS[5], LPAREN[8], NUMBER<Integer>[11], ID<String>[12]}]
  [$parenthesis1$0_many ::= (*) $parenthesis1$0_many $parenthesis1 , {EOF[1], PLUS[4], MINUS[5], LPAREN[8], NUMBER<Integer>[11], ID<String>[12]}]
}
transition on $parenthesis1$0_many to state [2]
transition on list to state [1]
transition on commands to state [1]

-------------------
lalr_state [1]: {
  [$START ::= commands (*) EOF , {EOF[1]}]
}
transition on EOF to state [3]

-------------------
lalr_state [2]: {
  [$START ::= commands (*) EOF , {EOF[1]}]
  [$parenthesis1$0_many ::= $parenthesis1$0_many (*) $parenthesis1 , {EOF[1], PLUS[4], MINUS[5], LPAREN[8], NUMBER<Integer>[11], ID<String>[12]}]
  [$parenthesis1 ::= (*) instr EOLN , {EOF[1], PLUS[4], MINUS[5], LPAREN[8], NUMBER<Integer>[11], ID<String>[12]}]
  [instr ::= (*) ID EQUAL expr , {EOLN[10]}]
  [instr ::= (*) expr , {EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
}
transition on $parenthesis1 to state [11]
transition on expr to state [10]
transition on instr to state [9]
transition on ID to state [8]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]
transition on EOF to state [3]

-------------------
lalr_state [3]: {
  [$START ::= commands EOF (*) , {EOF[1]}]
}

-------------------
lalr_state [4]: {
  [expr ::= PLUS (*) expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on expr to state [13]
transition on ID to state [12]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]

-------------------
lalr_state [5]: {
  [expr ::= MINUS (*) expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on expr to state [14]
transition on ID to state [12]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]

-------------------
lalr_state [6]: {
  [expr ::= LPAREN (*) expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
}
transition on expr to state [15]
transition on ID to state [12]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]

-------------------
lalr_state [7]: {
  [expr ::= NUMBER (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}

-------------------
lalr_state [8]: {
  [instr ::= ID (*) EQUAL expr , {EOLN[10]}]
  [expr ::= ID (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
}
transition on EQUAL to state [16]

-------------------
lalr_state [9]: {
  [$parenthesis1 ::= instr (*) EOLN , {EOF[1], PLUS[4], MINUS[5], LPAREN[8], NUMBER<Integer>[11], ID<String>[12]}]
}
transition on EOLN to state [17]

-------------------
lalr_state [10]: {
  [instr ::= expr (*) , {EOLN[10]}]
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
}
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
lalr_state [11]: {
  [$parenthesis1$0_many ::= $parenthesis1$0_many $parenthesis1 (*) , {EOF[1], PLUS[4], MINUS[5], LPAREN[8], NUMBER<Integer>[11], ID<String>[12]}]
}

-------------------
lalr_state [12]: {
  [expr ::= ID (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}

-------------------
lalr_state [13]: {
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= PLUS expr (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
lalr_state [14]: {
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= MINUS expr (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
lalr_state [15]: {
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9]}]
  [expr ::= LPAREN expr (*) RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on RPAREN to state [22]
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
lalr_state [16]: {
  [instr ::= ID EQUAL (*) expr , {EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
}
transition on expr to state [23]
transition on ID to state [12]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]

-------------------
lalr_state [17]: {
  [$parenthesis1 ::= instr EOLN (*) , {EOF[1], PLUS[4], MINUS[5], LPAREN[8], NUMBER<Integer>[11], ID<String>[12]}]
}

-------------------
lalr_state [18]: {
  [expr ::= expr PLUS (*) expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on expr to state [24]
transition on ID to state [12]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]

-------------------
lalr_state [19]: {
  [expr ::= expr MINUS (*) expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on expr to state [25]
transition on ID to state [12]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]

-------------------
lalr_state [20]: {
  [expr ::= expr TIMES (*) expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on expr to state [26]
transition on ID to state [12]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]

-------------------
lalr_state [21]: {
  [expr ::= expr DIVIDE (*) expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) expr DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) NUMBER , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= (*) ID , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on expr to state [27]
transition on ID to state [12]
transition on NUMBER to state [7]
transition on LPAREN to state [6]
transition on MINUS to state [5]
transition on PLUS to state [4]

-------------------
lalr_state [22]: {
  [expr ::= LPAREN expr RPAREN (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}

-------------------
lalr_state [23]: {
  [instr ::= ID EQUAL expr (*) , {EOLN[10]}]
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], EOLN[10]}]
}
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
lalr_state [24]: {
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr PLUS expr (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
lalr_state [25]: {
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr MINUS expr (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
lalr_state [26]: {
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr TIMES expr (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
lalr_state [27]: {
  [expr ::= expr (*) PLUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) MINUS expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) TIMES expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr (*) DIVIDE expr , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
  [expr ::= expr DIVIDE expr (*) , {PLUS[4], MINUS[5], TIMES[6], DIVIDE[7], RPAREN[9], EOLN[10]}]
}
transition on DIVIDE to state [21]
transition on TIMES to state [20]
transition on MINUS to state [19]
transition on PLUS to state [18]

-------------------
-------- ACTION_TABLE --------
From state #0
 [default:ERROR]
 [term 1:REDUCE(13)] [term 4:REDUCE(13)]
 [term 5:REDUCE(13)] [term 8:REDUCE(13)]
 [term 11:REDUCE(13)] [term 12:REDUCE(13)]
From state #1
 [default:ERROR]
 [term 1:SHIFT(3)]
From state #2
 [default:ERROR]
 [term 1:SHIFT(3)] [term 4:SHIFT(4)]
 [term 5:SHIFT(5)] [term 8:SHIFT(6)]
 [term 11:SHIFT(7)] [term 12:SHIFT(8)]
From state #3
 [default:ERROR]
 [term 1:REDUCE(0)]
From state #4
 [default:ERROR]
 [term 4:SHIFT(4)] [term 5:SHIFT(5)]
 [term 8:SHIFT(6)] [term 11:SHIFT(7)]
 [term 12:SHIFT(12)]
From state #5
 [default:ERROR]
 [term 4:SHIFT(4)] [term 5:SHIFT(5)]
 [term 8:SHIFT(6)] [term 11:SHIFT(7)]
 [term 12:SHIFT(12)]
From state #6
 [default:ERROR]
 [term 4:SHIFT(4)] [term 5:SHIFT(5)]
 [term 8:SHIFT(6)] [term 11:SHIFT(7)]
 [term 12:SHIFT(12)]
From state #7
 [default:ERROR]
 [term 4:REDUCE(11)] [term 5:REDUCE(11)]
 [term 6:REDUCE(11)] [term 7:REDUCE(11)]
 [term 9:REDUCE(11)] [term 10:REDUCE(11)]
From state #8
 [default:ERROR]
 [term 3:SHIFT(16)] [term 4:REDUCE(12)]
 [term 5:REDUCE(12)] [term 6:REDUCE(12)]
 [term 7:REDUCE(12)] [term 10:REDUCE(12)]
From state #9
 [default:ERROR]
 [term 10:SHIFT(17)]
From state #10
 [default:ERROR]
 [term 4:SHIFT(18)] [term 5:SHIFT(19)]
 [term 6:SHIFT(20)] [term 7:SHIFT(21)]
 [term 10:REDUCE(3)]
From state #11
 [default:ERROR]
 [term 1:REDUCE(14)] [term 4:REDUCE(14)]
 [term 5:REDUCE(14)] [term 8:REDUCE(14)]
 [term 11:REDUCE(14)] [term 12:REDUCE(14)]
From state #12
 [default:ERROR]
 [term 4:REDUCE(12)] [term 5:REDUCE(12)]
 [term 6:REDUCE(12)] [term 7:REDUCE(12)]
 [term 9:REDUCE(12)] [term 10:REDUCE(12)]
From state #13
 [default:ERROR]
 [term 4:REDUCE(9)] [term 5:REDUCE(9)]
 [term 6:REDUCE(9)] [term 7:REDUCE(9)]
 [term 9:REDUCE(9)] [term 10:REDUCE(9)]
From state #14
 [default:ERROR]
 [term 4:REDUCE(8)] [term 5:REDUCE(8)]
 [term 6:REDUCE(8)] [term 7:REDUCE(8)]
 [term 9:REDUCE(8)] [term 10:REDUCE(8)]
From state #15
 [default:ERROR]
 [term 4:SHIFT(18)] [term 5:SHIFT(19)]
 [term 6:SHIFT(20)] [term 7:SHIFT(21)]
 [term 9:SHIFT(22)]
From state #16
 [default:ERROR]
 [term 4:SHIFT(4)] [term 5:SHIFT(5)]
 [term 8:SHIFT(6)] [term 11:SHIFT(7)]
 [term 12:SHIFT(12)]
From state #17
 [default:ERROR]
 [term 1:REDUCE(1)] [term 4:REDUCE(1)]
 [term 5:REDUCE(1)] [term 8:REDUCE(1)]
 [term 11:REDUCE(1)] [term 12:REDUCE(1)]
From state #18
 [default:ERROR]
 [term 4:SHIFT(4)] [term 5:SHIFT(5)]
 [term 8:SHIFT(6)] [term 11:SHIFT(7)]
 [term 12:SHIFT(12)]
From state #19
 [default:ERROR]
 [term 4:SHIFT(4)] [term 5:SHIFT(5)]
 [term 8:SHIFT(6)] [term 11:SHIFT(7)]
 [term 12:SHIFT(12)]
From state #20
 [default:ERROR]
 [term 4:SHIFT(4)] [term 5:SHIFT(5)]
 [term 8:SHIFT(6)] [term 11:SHIFT(7)]
 [term 12:SHIFT(12)]
From state #21
 [default:ERROR]
 [term 4:SHIFT(4)] [term 5:SHIFT(5)]
 [term 8:SHIFT(6)] [term 11:SHIFT(7)]
 [term 12:SHIFT(12)]
From state #22
 [default:ERROR]
 [term 4:REDUCE(10)] [term 5:REDUCE(10)]
 [term 6:REDUCE(10)] [term 7:REDUCE(10)]
 [term 9:REDUCE(10)] [term 10:REDUCE(10)]
From state #23
 [default:ERROR]
 [term 4:SHIFT(18)] [term 5:SHIFT(19)]
 [term 6:SHIFT(20)] [term 7:SHIFT(21)]
 [term 10:REDUCE(2)]
From state #24
 [default:ERROR]
 [term 4:REDUCE(4)] [term 5:REDUCE(4)]
 [term 6:SHIFT(20)] [term 7:SHIFT(21)]
 [term 9:REDUCE(4)] [term 10:REDUCE(4)]
From state #25
 [default:ERROR]
 [term 4:REDUCE(5)] [term 5:REDUCE(5)]
 [term 6:SHIFT(20)] [term 7:SHIFT(21)]
 [term 9:REDUCE(5)] [term 10:REDUCE(5)]
From state #26
 [default:ERROR]
 [term 4:REDUCE(6)] [term 5:REDUCE(6)]
 [term 6:REDUCE(6)] [term 7:REDUCE(6)]
 [term 9:REDUCE(6)] [term 10:REDUCE(6)]
From state #27
 [default:ERROR]
 [term 4:REDUCE(7)] [term 5:REDUCE(7)]
 [term 6:REDUCE(7)] [term 7:REDUCE(7)]
 [term 9:REDUCE(7)] [term 10:REDUCE(7)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 1->state 1] [non term 6->state 2]
From state #1
From state #2
 [non term 2->state 9] [non term 3->state 10] [non term 5->state 11]
From state #3
From state #4
 [non term 3->state 13]
From state #5
 [non term 3->state 14]
From state #6
 [non term 3->state 15]
From state #7
From state #8
From state #9
From state #10
From state #11
From state #12
From state #13
From state #14
From state #15
From state #16
 [non term 3->state 23]
From state #17
From state #18
 [non term 3->state 24]
From state #19
 [non term 3->state 25]
From state #20
 [non term 3->state 26]
From state #21
 [non term 3->state 27]
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
-----------------------------
