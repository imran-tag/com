
//----------------------------------------------------
// The following code was generated by jh-javacup-1.3 20240325
// Wed Jun 25 10:52:53 CEST 2025
//----------------------------------------------------

package fr.uha.montivincent.jcupnflex.sample.calculator.reader;

import java.util.TreeMap;
import java.util.Map;

/** jh-javacup-1.3 20240325 generated parser.
  * @version Wed Jun 25 10:52:53 CEST 2025
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\036\000\002\003\003\003\003\003\003\003\003" +
    "\003\002\003\002\003\003\003\001\003\001\001" +
    "\003\001\001\005\002\006\000\006\002\034\130" +
    "\040\104\036\u0164\u0152\u0140\336\u017a\036\u019e\060" +
    "\320\302\264\u0184\u012e\034\u011c\u010a\370\346\246" +
    "\u0192\230\212\174\156\u01bc\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\034\001\021\032\003\002\001\007\011\043" +
    "\021\032\021\032\034\001\034\001\034\001\021" +
    "\032\013\036\021\032\021\032\034\001\013\036" +
    "\013\036\034\001\034\001\034\001\013\036\002" +
    "\007\013\036\013\036\034\001\002\011\002\013" +
    "\034\001\034\001\034\001\002\015\000\034\002" +
    "\017\002\021\034\001\000\034\000\034\034\001" +
    "\034\001\034\001\000\034\034\001\000\034\000" +
    "\034\033\012\034\001\033\012\033\012\033\012" +
    "\033\012\034\001\032\010\033\012\032\010\032" +
    "\010\032\010\032\010\034\001\031\006\032\010" +
    "\031\006\031\006\031\051\031\053\034\001\030" +
    "\004\031\006\030\004\030\004\030\051\030\053" +
    "\034\001\026\020\030\004\026\020\026\020\026" +
    "\020\026\020\034\001\016\014\026\020\016\014" +
    "\016\014\016\014\016\014\034\001\015\016\016" +
    "\014\015\016\015\016\015\016\015\016\034\001" +
    "\014\024\015\016\014\024\014\024\014\024\014" +
    "\024\034\001\007\022\014\024\007\022\007\022" +
    "\007\022\007\022\025\011\025\013\007\022\034" +
    "\001\034\001\025\015\034\001\025\017\025\031" +
    "\024\011\024\013\034\001\034\001\034\001\024" +
    "\015\034\001\024\017\024\031\023\011\023\013" +
    "\034\001\034\001\034\001\023\015\034\001\023" +
    "\017\023\031\022\011\022\013\034\001\034\001" +
    "\034\001\022\015\034\001\022\017\022\031\020" +
    "\011\020\013\034\001\034\001\034\001\020\015" +
    "\034\001\020\017\020\031\006\011\006\013\034" +
    "\001\034\001\034\001\006\015\034\001\006\017" +
    "\006\031\005\011\005\013\034\001\034\001\034" +
    "\001\005\015\034\001\005\017\005\031\004\011" +
    "\004\013\034\001\034\001\034\001\004\015\034" +
    "\001\004\017\004\031\010\024\034\001\010\024" +
    "\010\024\010\024\010\024\010\041\017\045\017" +
    "\047\017\051\017\053\034\001\027\026\017\055" +
    "\027\045\027\047\027\051\027\053\012\030\034" +
    "\001\012\045\012\047\012\051\012\053\034\001" +
    "\034\001\034\001\034\001\034\001\034\001\030" +
    "\001\001\007\001\024\023\016\002\011\033\012" +
    "\032\013\031\030\027\014\017\013\012\010\006" +
    "\016\015"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }




    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

	private Map<String, Integer> values = new TreeMap<String, Integer> ();

	public void setValue (String name, int value) {
		values.put(name, Integer.valueOf (value));
	}
	
	public int getValue (String name) {
		int value = 0;
		if (values.containsKey(name))
			value = values.get(name).intValue();
		return value;
	}




/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {
  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= command EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$START, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // expr ::= expr __REGEXP_1__ expr 
          case 1:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = CUP$stack.get(CUP$size - 1);
              Integer e2 = (Integer) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = CUP$stack.get(CUP$size - 3);
              Integer e1 = (Integer) e1$.value;
  RESULT = e1 + e2;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, e1$, e2$, RESULT);
            }

          // expr ::= expr __REGEXP_2__ expr 
          case 2:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = CUP$stack.get(CUP$size - 1);
              Integer e2 = (Integer) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = CUP$stack.get(CUP$size - 3);
              Integer e1 = (Integer) e1$.value;
  RESULT = e1 - e2;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, e1$, e2$, RESULT);
            }

          // expr ::= expr __REGEXP_3__ expr 
          case 3:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = CUP$stack.get(CUP$size - 1);
              Integer e2 = (Integer) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = CUP$stack.get(CUP$size - 3);
              Integer e1 = (Integer) e1$.value;
  RESULT = e1 * e2;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, e1$, e2$, RESULT);
            }

          // expr ::= expr __REGEXP_4__ expr 
          case 4:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e2$ = CUP$stack.get(CUP$size - 1);
              Integer e2 = (Integer) e2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol e1$ = CUP$stack.get(CUP$size - 3);
              Integer e1 = (Integer) e1$.value;
  RESULT = e1 / e2;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, e1$, e2$, RESULT);
            }

          // expr ::= __REGEXP_2__ expr 
          case 5:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 1);
              Integer e = (Integer) e$.value;
  RESULT = - e;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, CUP$stack.get(CUP$size - 2), e$, RESULT);
            }

          // expr ::= __REGEXP_1__ expr 
          case 6:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 1);
              Integer e = (Integer) e$.value;
  RESULT = + e;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, CUP$stack.get(CUP$size - 2), e$, RESULT);
            }

          // expr ::= __REGEXP_6__ expr __REGEXP_7__ 
          case 7:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 2);
              Integer e = (Integer) e$.value;
  RESULT = e;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // expr ::= NUMBER 
          case 8:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              Integer n = (Integer) n$.value;
  RESULT = n;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, n$, n$, RESULT);
            }

          // expr ::= ID 
          case 9:
            {
              Integer RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              String n = (String) n$.value;
  RESULT = parser.getValue(n);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expr, n$, n$, RESULT);
            }

          // instr ::= ID __REGEXP_5__ expr 
          case 10:
            {
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 1);
              Integer e = (Integer) e$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 3);
              String n = (String) n$.value;
  parser.setValue (n, e);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.instr, n$, e$);
            }

          // instr ::= expr 
          case 11:
            {
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 1);
              Integer e = (Integer) e$.value;
  System.out.println (e);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.instr, e$, e$);
            }

          // $parenthesis1 ::= instr EOLN 
          case 12:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis1$0_many ::= 
          case 13:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis1$0_many ::= $parenthesis1$0_many $parenthesis1 
          case 14:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
